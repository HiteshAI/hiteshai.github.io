I"­V<h1 id="face-recognition-using-eigenfaces"><strong>Face Recognition using Eigenfaces</strong></h1>
<hr />

<p>####We will be using <a href="https://fei.edu.br/~cet/facedatabase.html">FEI Face Database</a>  for our face recognition purpose. 
<em>Datasets consist of faces of 200 people and each person has two frontal images (one with a neutral expression and the other with a smiling facial expression), there are 400 full frontal face images manually registered and cropped.</em>
<br /><br /><strong>We will use normalized, equalized and cropped frontal face images.</strong></p>

<p>Add dataset in your Colab using:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!wget &lt;link&gt; 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span> <span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">fei</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">br</span><span class="o">/~</span><span class="n">cet</span><span class="o">/</span><span class="n">frontalimages_manuallyaligned_part1</span><span class="o">.</span><span class="nb">zip</span>
<span class="err">!</span> <span class="n">wget</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">fei</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">br</span><span class="o">/~</span><span class="n">cet</span><span class="o">/</span><span class="n">frontalimages_manuallyaligned_part2</span><span class="o">.</span><span class="nb">zip</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--2019-12-12 05:17:05--  https://fei.edu.br/~cet/frontalimages_manuallyaligned_part1.zip
Resolving fei.edu.br (fei.edu.br)... 200.232.90.210
Connecting to fei.edu.br (fei.edu.br)|200.232.90.210|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 6209322 (5.9M) [application/x-zip-compressed]
Saving to: â€˜frontalimages_manuallyaligned_part1.zipâ€™

frontalimages_manua 100%[===================&gt;]   5.92M  3.23MB/s    in 1.8s    

2019-12-12 05:17:07 (3.23 MB/s) - â€˜frontalimages_manuallyaligned_part1.zipâ€™ saved [6209322/6209322]

--2019-12-12 05:17:11--  https://fei.edu.br/~cet/frontalimages_manuallyaligned_part2.zip
Resolving fei.edu.br (fei.edu.br)... 200.232.90.210
Connecting to fei.edu.br (fei.edu.br)|200.232.90.210|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 6168379 (5.9M) [application/x-zip-compressed]
Saving to: â€˜frontalimages_manuallyaligned_part2.zipâ€™

frontalimages_manua 100%[===================&gt;]   5.88M  3.02MB/s    in 1.9s    

2019-12-12 05:17:13 (3.02 MB/s) - â€˜frontalimages_manuallyaligned_part2.zipâ€™ saved [6168379/6168379]
</code></pre></div></div>

<p>Unzip your zip files using:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>!unzip &lt;name_of_your_zip_file&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">unzip</span> <span class="n">frontalimages_manuallyaligned_part1</span><span class="o">.</span><span class="nb">zip</span>
<span class="err">!</span><span class="n">unzip</span> <span class="n">frontalimages_manuallyaligned_part2</span><span class="o">.</span><span class="nb">zip</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Archive:  frontalimages_manuallyaligned_part1.zip
  inflating: 178b.jpg                
  inflating: 179a.jpg                
  inflating: 179b.jpg                
  inflating: 180a.jpg                
  inflating: 180b.jpg                
  inflating: 181a.jpg                
  inflating: 181b.jpg                
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># importing all the necessary packages 
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</code></pre></div></div>

<p>###Vectorization
We will use Python Imaging Library (PIL) to load images from files.
<code class="highlighter-rouge">PIL.Image.open()</code> Opens and identifies the given image file.<code class="highlighter-rouge">Note</code> Open into greyscale, or L(Luminance) mode:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="s">'{i}a.jpg'</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">'L'</span><span class="p">)</span>  <span class="c1"># i ranges from 1 to 200
</span><span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">resize</span><span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">),</span><span class="n">Image</span><span class="o">.</span><span class="n">ANTIALIAS</span><span class="p">)</span> <span class="c1"># for speed
</span></code></pre></div></div>
<p>Rearrange each Face image N x N into a column vector N<sup>2</sup> x 1. After Vectorization the shape of face matrix should be 200 x (width x height)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># neutral face
</span><span class="n">neutral</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">200</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="s">'{i}b.jpg'</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">'L'</span><span class="p">)</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">resize</span><span class="p">((</span><span class="mi">58</span><span class="p">,</span><span class="mi">49</span><span class="p">),</span> <span class="n">Image</span><span class="o">.</span><span class="n">ANTIALIAS</span><span class="p">)</span>
    <span class="n">img2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">img</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span> <span class="c1"># vectorization
</span>    <span class="n">neutral</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check face_matrix.shape 
</span>
<span class="n">faces_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">(</span><span class="n">neutral</span><span class="p">)</span>
<span class="n">faces_matrix</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(200, 2842)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Find mean_face
</span>
<span class="n">mean_face</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">faces_matrix</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">mean_face</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2842,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">mean_face</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">height</span><span class="p">,</span><span class="n">width</span><span class="p">),</span><span class="n">cmap</span><span class="o">=</span><span class="s">'gray'</span><span class="p">);</span> 
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Mean Face'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">mean_face</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span><span class="mi">58</span><span class="p">),</span><span class="n">cmap</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.image.AxesImage at 0x7f6fe62d8e80&gt;
</code></pre></div></div>

<p><img src="output_12_1.png" alt="png" /></p>

<h3 id="normalization">Normalization</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Perfrom Normalization
</span><span class="n">faces_norm</span> <span class="o">=</span> <span class="n">faces_matrix</span> <span class="o">-</span> <span class="n">mean_face</span>
<span class="n">faces_norm</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(200, 2842)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate covariance matrix
#np.cov expects features as rows and observations as columns, so transpose
</span><span class="n">face_cov</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">cov</span><span class="p">(</span><span class="n">faces_norm</span><span class="o">.</span><span class="n">T</span><span class="p">)</span>
<span class="n">face_cov</span><span class="o">.</span><span class="n">shape</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2842, 2842)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Find Eigen Vectors and Eigen Values, you can use SVD from np.linalg.svd
</span><span class="n">eigen_vecs</span><span class="p">,</span> <span class="n">eigen_vals</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">svd</span><span class="p">(</span><span class="n">face_cov</span><span class="p">)</span>
<span class="n">eigen_vecs</span><span class="o">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2842, 2842)
</code></pre></div></div>

<p>Plot the first 10 Eigenfaces</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">img</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">eigen_vectors</span><span class="o">&gt;</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">height</span><span class="p">,</span><span class="n">width</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"First 10 Eigenfaces"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Plot the first 10 Eigenfaces
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">eigen_vecs</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span><span class="mi">58</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'gray'</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"First 10 Eigenfaces"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 0.98, 'First 10 Eigenfaces')
</code></pre></div></div>

<p><img src="output_18_1.png" alt="png" /></p>

<p>Reconstruction with increasing Eigenfaces</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fig, axs = plt.subplots(2,5,figsize=(15,6))
for k, i in zip([0,1,9,19,39,79,159,199,399,799],np.arange(10)):
    # Reconstruct the first picture '1a.jpg' whose index is 0.
    # Get PC scores of the images (wights)
    # Reconstruct first face in dataset using k PCs (projected_face)
    ax = plt.subplot(2,5,i+1)
    ax.set_title("k = "+str(k+1))
    plt.imshow(projected_face.reshape(height,width)+mean_face.reshape(height,width),cmap='gray');
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Reconstruct with increasing Eigenfaces
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">159</span><span class="p">,</span><span class="mi">199</span><span class="p">,</span><span class="mi">399</span><span class="p">,</span><span class="mi">799</span><span class="p">],</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
    <span class="c1"># Reconstruct the first picture '1a.jpg' whose index is 0.
</span>    <span class="n">weight</span> <span class="o">=</span> <span class="n">faces_norm</span><span class="p">[</span><span class="mi">0</span><span class="p">,:]</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">eigen_vecs</span><span class="p">[:,:</span><span class="n">k</span><span class="p">])</span> <span class="c1"># Get PC scores of the images
</span>    <span class="n">projected_face</span> <span class="o">=</span> <span class="n">weight</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">eigen_vecs</span><span class="p">[:,:</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="c1"># Reconstruct first face in dataset using k PCs
</span>    <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">"k = "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">projected_face</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span><span class="mi">58</span><span class="p">)</span><span class="o">+</span><span class="n">mean_face</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">49</span><span class="p">,</span><span class="mi">58</span><span class="p">),</span><span class="n">cmap</span><span class="o">=</span><span class="s">'gray'</span><span class="p">);</span>
<span class="n">fig</span><span class="o">.</span><span class="n">suptitle</span><span class="p">((</span><span class="s">"Reconstruction with Increasing Eigenfaces"</span><span class="p">),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 0.98, 'Reconstruction with Increasing Eigenfaces')
</code></pre></div></div>

<p><img src="output_20_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET
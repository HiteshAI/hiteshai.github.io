I"în<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">mnicnc404</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">.</span><span class="n">git</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">cd</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">/</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">keras</span><span class="o">-</span><span class="n">team</span><span class="o">/</span><span class="n">keras</span><span class="o">-</span><span class="n">contrib</span><span class="o">.</span><span class="n">git</span> \
    <span class="o">&amp;&amp;</span> <span class="n">cd</span> <span class="n">keras</span><span class="o">-</span><span class="n">contrib</span> \
    <span class="o">&amp;&amp;</span> <span class="n">python</span> <span class="n">convert_to_tf_keras</span><span class="o">.</span><span class="n">py</span> \
    <span class="o">&amp;&amp;</span> <span class="n">USE_TF_KERAS</span><span class="o">=</span><span class="mi">1</span> <span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">tensorflow</span><span class="o">-</span><span class="n">gpu</span><span class="o">==</span><span class="mf">2.0.0</span><span class="n">a0</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">tqdm</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">imageio</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">tb</span><span class="o">-</span><span class="n">nightly</span><span class="o">==</span><span class="mf">1.14.0</span><span class="n">a20190505</span>


<span class="c1"># !pip install -r requirements_cpu.txt
</span>
<span class="c1"># !pip install tensorflow-gpu==2.0.0
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="n">tf</span><span class="o">.</span><span class="n">__version__</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
<span class="n">drive</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s">'/content/drive'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># If you have downloaded my dataset, then keep dataset_name as it is. If you have uploaded your own dataset to gdrive then write its name in dataset_name.
</span><span class="n">dataset_name</span> <span class="o">=</span> <span class="s">'new_dataset_cartoon_meena_cleaned_again.zip'</span>
<span class="err">!</span><span class="n">cp</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">drive</span><span class="o">/</span><span class="n">My</span>\ <span class="n">Drive</span><span class="o">/</span><span class="p">{</span><span class="n">dataset_name</span><span class="p">}</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">/</span>
<span class="err">!</span><span class="n">unzip</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">/</span><span class="p">{</span><span class="n">dataset_name</span><span class="p">}</span> 

</code></pre></div></div>

<h1 id="data-preprocessing"><strong>Data Preprocessing</strong></h1>
<p>This is one of the critical steps before feeding your data to your AI model. We need to ensure that images are not broken, or aspects in your input data which is worth exploring in details. It helps to understand the problem.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="nb">dir</span> <span class="o">=</span> <span class="s">'/content/CartoonGan-tensorflow/datasets/meena_cartoon/trainB'</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">walk</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="k">def</span> <span class="nf">get_img_absolute_path</span><span class="p">(</span><span class="n">imgs_path</span><span class="p">):</span>
  <span class="nb">list</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">dirpath</span><span class="p">,</span> <span class="n">dirnames</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">walk</span><span class="p">(</span><span class="n">imgs_path</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
      <span class="n">abs_filepath</span> <span class="o">=</span> <span class="n">dirpath</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">f</span>  
      <span class="nb">list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">abs_filepath</span><span class="p">)</span>
  <span class="k">return</span> <span class="nb">list</span>


<span class="n">neutral</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">remove_corrupt_data</span><span class="p">(</span><span class="n">fullpath_image_list</span><span class="p">):</span>
  <span class="nb">filter</span> <span class="o">=</span> <span class="n">fullpath_image_list</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">fullpath_image_list</span><span class="p">)):</span>
      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
      
      <span class="c1"># img = Image.open(f'{i}b.jpg').convert('L')
</span>      <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">fullpath_image_list</span><span class="p">:</span>
        <span class="n">img_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="nb">dir</span><span class="p">)</span>
        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">img_name</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">img</span><span class="p">:</span>
          <span class="k">print</span><span class="p">(</span><span class="n">fullpath_image_list</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">img_name</span><span class="p">))</span>
          <span class="nb">filter</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">img_name</span><span class="p">))</span>
          <span class="k">continue</span>
      <span class="k">return</span> <span class="nb">filter</span>  

<span class="k">def</span> <span class="nf">img_to_numpy_array</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
  <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="nb">open</span><span class="p">(</span><span class="n">img</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s">'L'</span><span class="p">)</span>
  <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">resize</span><span class="p">((</span><span class="n">size</span><span class="p">,</span><span class="n">size</span><span class="p">),</span> <span class="n">Image</span><span class="o">.</span><span class="n">ANTIALIAS</span><span class="p">)</span>
  <span class="n">img2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">img</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span> <span class="c1"># vectorization
</span>  <span class="k">return</span> <span class="n">img2</span>    

<span class="n">fullpath_image_list</span> <span class="o">=</span> <span class="n">get_img_absolute_path</span><span class="p">(</span><span class="nb">dir</span><span class="p">)</span>
<span class="n">clean_data</span> <span class="o">=</span> <span class="n">remove_corrupt_data</span><span class="p">(</span><span class="n">fullpath_image_list</span><span class="p">)</span>

<span class="n">neutral</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">clean_data</span><span class="p">:</span>
  <span class="n">img2</span> <span class="o">=</span> <span class="n">img_to_numpy_array</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
  <span class="n">neutral</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
  
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">(</span><span class="n">neutral</span><span class="p">)</span>
        

<span class="c1"># print(neutral)
# X = np.asarray(neutral)
</span><span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">),</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"X ndim: "</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"X shape:"</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"X size: "</span><span class="p">,</span> <span class="n">X</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"y ndim: "</span><span class="p">,</span> <span class="n">y</span><span class="o">.</span><span class="n">ndim</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"y shape:"</span><span class="p">,</span> <span class="n">y</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"y size: "</span><span class="p">,</span> <span class="n">y</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>

</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X ndim:  2
X shape: (843, 16384)
X size:  13811712
y ndim:  2
y shape: (843, 1)
y size:  843
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">visualize_sample</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span><span class="mi">128</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">)</span>
    <span class="c1"># plt.imshow(X, interpolation='nearest')
</span>

<span class="n">i</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
<span class="n">visualize_sample</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</code></pre></div></div>

<p><img src="output_9_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">'/content/CartoonGan-tensorflow'</span><span class="p">))</span>
<span class="c1"># !python /content/CartoonGan-tensorflow/scripts/smooth.py --path /content/CartoonGan-tensorflow/datasets/meena_cartoon
</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0% 3/843 [00:03&lt;15:42,  1.12s/it]
Traceback (most recent call last):
  File "/content/CartoonGan-tensorflow/scripts/smooth.py", line 57, in &lt;module&gt;
    main(args.path)
  File "/content/CartoonGan-tensorflow/scripts/smooth.py", line 49, in main
    make_edge_smooth(path)
  File "/content/CartoonGan-tensorflow/scripts/smooth.py", line 37, in make_edge_smooth
    gauss))
KeyboardInterrupt
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># !python train.py \
#     --batch_size 4 \
#     --pretrain_epochs 1 \
#     --content_lambda .4 \
#     --pretrain_learning_rate 2e-4 \
#     --g_adv_lambda 8. \
#     --generator_lr 8e-5 \
#     --discriminator_lr 3e-5 \
#     --style_lambda 25. \
#     --light \
#     --dataset_name {meena-cartoon}
# os.path.join()
</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">'/content/CartoonGan-tensorflow'</span><span class="p">))</span>
<span class="err">!</span><span class="n">python</span> <span class="n">train</span><span class="o">.</span><span class="n">py</span> \
    <span class="o">--</span><span class="n">batch_size</span> <span class="mi">8</span> \
    <span class="o">--</span><span class="n">pretrain_epochs</span> <span class="mi">1</span> \
    <span class="o">--</span><span class="n">content_lambda</span> <span class="mf">.4</span> \
    <span class="o">--</span><span class="n">pretrain_learning_rate</span> <span class="mf">1e-4</span> \
    <span class="o">--</span><span class="n">g_adv_lambda</span> <span class="mf">8.</span> \
    <span class="o">--</span><span class="n">generator_lr</span> <span class="mf">4e-5</span> \
    <span class="o">--</span><span class="n">discriminator_lr</span> <span class="mf">1.5e-5</span> \
    <span class="o">--</span><span class="n">style_lambda</span> <span class="mf">25.</span> \
    <span class="o">--</span><span class="n">light</span> \
    <span class="o">--</span><span class="n">dataset_name</span> <span class="n">meena_cartoon</span> \
    <span class="o">--</span><span class="n">disable_sampling</span> \
    <span class="o">--</span><span class="n">sample_size</span> <span class="mi">50</span>


<span class="c1">#Full training
# !python train.py \
#     --batch_size 8 \
#     --pretrain_epochs 1 \
#     --content_lambda .4 \
#     --pretrain_learning_rate 2e-4 \
#     --g_adv_lambda 8. \
#     --generator_lr 8e-5 \
#     --discriminator_lr 3e-5 \
#     --style_lambda 25. \
#     --light \
#     --dataset_name meena_cartoon    
</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:523: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:524: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:525: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:526: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:527: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/dtypes.py:532: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:541: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:542: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:543: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:544: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:545: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
/usr/local/lib/python3.6/dist-packages/tensorboard/compat/tensorflow_stub/dtypes.py:550: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
[2020-01-18 19:53:46] [Trainer] [INFO] Setting up VGG19 for computing content loss...
Downloading data from https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5
80142336/80134624 [==============================] - 3s 0us/step
[2020-01-18 19:53:51] [Trainer] [INFO] Setting up objective functions and metrics using lsgan...
[2020-01-18 19:53:51] [Trainer] [INFO] Setting up checkpoint paths...
[2020-01-18 19:53:51] [Trainer] [INFO] Starting to pretrain generator with 1 epochs...
[2020-01-18 19:53:51] [Trainer] [INFO] Building `meena_cartoon` dataset with domain `A`...
[2020-01-18 19:53:51] [Trainer] [INFO] Found 10603 domainA images in trainA folder.
[2020-01-18 19:53:51] [Trainer] [INFO] Initializing generator with batch_size: 8, input_size: 256...
Model: "Generator"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
FlatConv (FlatConv)          (8, 256, 256, 96)         7298      
_________________________________________________________________
DownShuffleUnitV2 (DownShuff (8, 128, 128, 192)        29384     
_________________________________________________________________
DownShuffleUnitV2 (DownShuff (8, 64, 64, 384)          114056    
_________________________________________________________________
sequential_15 (Sequential)   (8, 64, 64, 384)          603696    
_________________________________________________________________
UpSampleConv (UpSampleConv)  (8, 128, 128, 192)        93222     
_________________________________________________________________
UpSampleConv (UpSampleConv)  (8, 256, 256, 96)         23574     
_________________________________________________________________
sequential_20 (Sequential)   (8, 256, 256, 3)          7203      
_________________________________________________________________
activation (Activation)      (8, 256, 256, 3)          0         
=================================================================
Total params: 878,433
Trainable params: 878,433
Non-trainable params: 0
_________________________________________________________________
[2020-01-18 19:53:54] [Trainer] [INFO] Setting up optimizer to update generator's parameters...
[2020-01-18 19:53:54] [Trainer] [INFO] Try restoring checkpoint: `training_checkpoints/pretrain/pretrain_generator`...
[2020-01-18 19:53:54] [Trainer] [INFO] Checkpoint is not found, training from scratch with 1 epochs...
[2020-01-18 19:53:54] [Trainer] [INFO] Proceeding pretraining without sample images...
[2020-01-18 19:53:54] [Trainer] [INFO] Starting pre-training loop, setting up summary writer to record progress on TensorBoard...
Pretrain Epoch 1/1:   0% 0/1326 [00:00&lt;?, ?it/s]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">reload_ext</span> <span class="n">tensorboard</span>
<span class="o">%</span><span class="n">load_ext</span> <span class="n">tensorboard</span>
<span class="o">%</span><span class="n">tensorboard</span> <span class="o">--</span><span class="n">logdir</span> <span class="n">runs</span>
</code></pre></div></div>

<h1 id="export-your-model"><strong>Export your model</strong></h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">mkdir</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">/</span><span class="n">exported_models</span><span class="o">/</span><span class="n">light_meena_SavedModel</span> 
<span class="n">out_dir</span> <span class="o">=</span> <span class="s">'/content/CartoonGan-tensorflow/exported_models/light_meena_SavedModel'</span>
<span class="n">m_path</span> <span class="o">=</span> <span class="s">'/content/CartoonGan-tensorflow/training_checkpoints'</span>

<span class="err">!</span><span class="n">python</span> <span class="n">export</span><span class="o">.</span><span class="n">py</span> \
    <span class="o">--</span><span class="n">m_path</span> <span class="n">m_path</span> \
    <span class="o">--</span><span class="n">out_dir</span> <span class="n">out_dir</span> \
    <span class="o">--</span><span class="n">light</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="nb">zip</span> <span class="o">-</span><span class="n">r</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">new_dataset_cartoon_meena_cleaned</span><span class="o">.</span><span class="nb">zip</span> <span class="o">/</span><span class="n">content</span><span class="o">/</span><span class="n">CartoonGan</span><span class="o">-</span><span class="n">tensorflow</span><span class="o">/</span><span class="n">datasets</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">()</span>
<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">files</span>
</code></pre></div></div>
:ET